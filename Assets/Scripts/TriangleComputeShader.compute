#pragma kernel CSMain

RWTexture2D<float4> Result;

uint width;
uint height;
float4 triangleColor; // 🎨 삼각형 색상을 위한 변수

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height)
        return;

    // 🚀 Compute Shader의 Y 좌표를 반전
    float2 uv = float2(id.x / (float) width, 1.0 - (id.y / (float) height));

    // ✅ 삼각형을 올바른 스크린 좌표로 변환
    float2 v0 = float2(0.5 * width, (1.0 - 0.2) * height); // 화면 중앙 위쪽
    float2 v1 = float2(0.7 * width, (1.0 - 0.8) * height); // 오른쪽 아래
    float2 v2 = float2(0.3 * width, (1.0 - 0.8) * height); // 왼쪽 아래

    float2 p = float2(id.x, id.y);

    // ✅ 삼각형 내부 판별 (Barycentric 좌표)
    float2 edge0 = v1 - v0;
    float2 edge1 = v2 - v1;
    float2 edge2 = v0 - v2;

    float2 p0 = p - v0;
    float2 p1 = p - v1;
    float2 p2 = p - v2;

    float cross0 = edge0.x * p0.y - edge0.y * p0.x;
    float cross1 = edge1.x * p1.y - edge1.y * p1.x;
    float cross2 = edge2.x * p2.y - edge2.y * p2.x;

    if ((cross0 > 0 && cross1 > 0 && cross2 > 0) || (cross0 < 0 && cross1 < 0 && cross2 < 0))
    {
        Result[id.xy] = triangleColor; // 삼각형 내부: 빨간색
    }
    else
    {
        Result[id.xy] = float4(0, 0, 0, 0); // 삼각형 외부: 투명
    }
}
